name: Enhanced Project Automation

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, edited, milestoned]
  pull_request:
    types: [opened, closed, reopened, review_requested, ready_for_review, converted_to_draft, edited]
  pull_request_review:
    types: [submitted, dismissed]
  milestone:
    types: [created, edited]

jobs:
  manage_project_items:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const { issue, pull_request, review, milestone } = context.payload;
            const item = issue || pull_request;
            
            async function updateProjectItem(itemId, status, fields = {}) {
              if (status) {
                await setProjectStatus(itemId, status);
              }
              
              for (const [field, value] of Object.entries(fields)) {
                await setProjectField(itemId, field, value);
              }
            }
            
            // Handle different event types
            if (context.eventName === 'issues') {
              const fields = {
                Service: item.labels.find(l => l.name.startsWith('service:'))?.name.replace('service:', '') || 'Other',
                Priority: item.labels.find(l => l.name.startsWith('priority:'))?.name.replace('priority:', '') || 'Medium',
                Type: item.labels.find(l => l.name.startsWith('type:'))?.name.replace('type:', '') || 'Feature'
              };
              
              if (item.milestone) {
                fields['Target Release'] = item.milestone.title;
              }
              
              switch (context.payload.action) {
                case 'opened':
                  await updateProjectItem(item.node_id, 'Requirements', fields);
                  break;
                case 'assigned':
                  await updateProjectItem(item.node_id, 'Sprint Planning', fields);
                  break;
                case 'milestoned':
                  fields['Target Release'] = item.milestone.title;
                  await updateProjectItem(item.node_id, null, fields);
                  break;
                case 'closed':
                  await updateProjectItem(item.node_id, 'Done', fields);
                  break;
              }
            } else if (context.eventName === 'pull_request') {
              const fields = {
                Type: 'Enhancement',
                Priority: 'Medium',
                Service: pull_request.labels.find(l => l.name.startsWith('service:'))?.name.replace('service:', '') || 'Other'
              };
              
              switch (context.payload.action) {
                case 'opened':
                  await updateProjectItem(item.node_id, 'In Progress', fields);
                  break;
                case 'ready_for_review':
                  await updateProjectItem(item.node_id, 'Code Review', fields);
                  break;
                case 'closed':
                  if (item.merged) {
                    await updateProjectItem(item.node_id, 'Done', fields);
                  }
                  break;
              }
            } else if (context.eventName === 'pull_request_review') {
              if (review.state === 'approved') {
                await updateProjectItem(pull_request.node_id, 'Testing');
              } else if (review.state === 'changes_requested') {
                await updateProjectItem(pull_request.node_id, 'In Progress');
              }
            }

  dependency_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const { issue, pull_request } = context.payload;
            const item = issue || pull_request;
            
            if (!item) return;
            
            // Check for dependencies in body
            const dependencyRegex = /depends on #(\d+)/gi;
            const matches = item.body.matchAll(dependencyRegex);
            
            for (const match of matches) {
              const dependencyId = match[1];
              const dependency = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(dependencyId)
              });
              
              if (!dependency.data.closed) {
                // Add blocked label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: item.number,
                  labels: ['blocked']
                });
                break;
              }
            }

  milestone_sync:
    runs-on: ubuntu-latest
    if: github.event_name == 'milestone'
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const milestone = context.payload.milestone;
            
            // Get all issues in milestone
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone: milestone.number,
              state: 'all'
            });
            
            // Update target release for all issues
            for (const issue of issues.data) {
              await updateProjectItem(issue.node_id, null, {
                'Target Release': milestone.title
              });
            }

  notify_slack:
    runs-on: ubuntu-latest
    needs: [manage_project_items, dependency_check]
    if: always()
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
